RAIN_Z application for Arduino

Version 0.5

by Rafael Ferruz Martínez

contact: rafaferruz@hotmail.com

See the online documentation here: No disposable


OBJETIVOS
=========

RAIN_Z es una aplicación diseñada para controlar un sistema de riego mediante placas Arduino.

	La idea inicial a desarrollar es diseñar un controlador central que permita transmitir a una electroválvula de riego la orden de abrir o cerrar el paso del agua de una zona de riego. En versiones posteriores se desarrollarán sistemas de programación de riego por zonas y control de tiempos. La particularidad de este diseño es que la comunicación entre el controlador central y la electrónica de control de la electroválvula es inalambrica por radiofrecuencia para poder ser montada sin necesidad de realizar obras de canalización de cableado soterradas o aéreas, con alcances cortos-medios (hasta 80-100 metros) y posibilidad de alcances medios-largos (hasta 2000 metros).

	La idea inicial plantea la necesidad de diseñar y desarrollar tres partes: controlador central, control de electroválvula y medio de comunicación.

CONTROLADOR CENTRAL
===================

	El controlador central es un instrumento que debe permitir al usuario la programación y envío de órdenes de arraque/parada a la electroválvula.

	La comunicación entre el controlador y el usuario se realizará a través de un display LCD y un teclado de botones.

	El diseño inicial incorporará un display LCD de 16x2 y soporta dos tipos de teclado de botones, una de ellas consistirá en tres botones y la otra permitirá utilizar un teclado (keypad) matricial de 16 botones.

	El display LCD de 16 columnas por 2 filas es compatible con el modelo PC-1602H y se utiliza para su control la librería LiquidCrystal.

	El método de funcionalidad mediante tres botones pulsadores permitirá al usuario dar órdenes de ejecución de operaciones y/o modificación de parámetros de la aplicación mediante la navegación a través de un menú mostrado en el display LCD, asignando a cada uno de los botones las funcionalidades de 'Retroceder a submenú anterior', 'Navegar a la siguiente opción  de un submenú o Cambiar el valor de un parámetro' y 'Seleccionar una opción de menú o validar el valor mostrado en el display'. El desarrollo de modelo de controlador con tres botones queda pospuesto para futuras versiones.

	El método de funcionalidad mediante un teclado/keypad de 16 botones permite al usuario la navegación por los menús de la aplicación y la entrada de valores numéricos con las teclas numéricas del 0 al 9 del teclado. El resto de teclas su usarán para las diferentes funciones de navegación y operaciones de validación o borrado de valores. La siguiente tabla muestra la funcionalidad de cada tecla de comando:

	#	Muestra el Menú principal o regresa al nivel superior inmediato a la opción de navegación en la que se encuentre el usuario.
	D	Representa la tecla de validación de un valor mostrado o introducido por el teclado.
	A	Subir a la opción anterior del nivel de navegación en el que se encuentre el usuario. (No implementada).
	B	Baja a la opción siguiente del nivel de navegación en el que se encuentre el usuario. (No implementada)
	C	Borra el último caracter introducido mediante el teclado. (No implementada).
	*	Detiene la actividad de todos los dispositivos.


TECLADO (KEYPAD) DE 16 TECLAS
=============================

	La representación física de un teclado de 16 teclas y la distribución de sus pines de salida se muestra en el siguiente esquema:

	 col1 col2 col3 col4
	+----+----+----+----+
	| 1  | 2  | 3  | A  |   row1
	+----+----+----+----+
	| 4  | 5  | 6  | B  |   row2
	+----+----+----+----+
	| 7  | 8  | 9  | C  |   row3
	+----+----+----+----+
	| *  | 0  | #  | D  |   row4
	+----+----+----+----+
           o o o o o o o o
	   1 2 3 4 5 6 7 8

	Los pines o salidas 1 a 8 se activarán según la siguiente tabla:

	Pin	col/row		teclas que lo activan
	===	=======		=====================
	 1	col1		1, 4, 7 y *
	 2	col2		2, 5, 8 y 0
	 3	col3		3, 6, 9 y #
	 4	col4		A, B, C y D
	 5	row1		1, 2, 3 y A
	 6	row2		4, 5, 6 y B
	 7	row3		7, 8, 9 y C
	 8	row4		*, 0, # y D

	Así pues, si se pulsa la tecla 1 serán los pines 1 y 5 los que presentarán un estado alto en tanto que el resto presentarán un estado bajo. De igual modo, si se pulsa la tecla 2 serán los pines 2 y 5 los que presentarán un estado alto en tanto que el resto presentarán un estado bajo. Y así sucesivamente.


MENU DE NAVEGACION
==================

	MENU GENERAL
		MODO MANUAL
			[1-4]D	Activa el dispositivo indicado mediante una cifra entre 1 y 4.
			*	Detiene la actividad de todos los dispositivos.
		MODO PROGRAMA
		MODO CONFIGURACION	

	
	Esta primera versión del Menú General pretende únicamente establecer el modo de funcionamiento básico del teclado de la consola de usuario, por lo que no se desarrollan opciones en los modos PROGRAMA y CONFIGURACION, existiendo estos para establecer un menú de usuario mínimo.

	La creación de menús en la aplicación se realiza mediante el uso de dos clases: Menux y MenuOption.

	Menux ofrece la funcionalidad de navegación a través de las distintas opciones representadas por una colección de objetos MenuOption. Cada objeto MenuOption contiene las definiciones de cada una de las opciones del menú.
	Para la creación de un objeto Menux se deben ir creando cada uno de los objetos MenuOption mediante el constructor que tiene la clase MenuOption, los cuales van a definir cada una de las opciones. Los datos que se deben suministrar como parámetros del constructor son:

		- Código numérico asignado al grupo de opciones al que queramos que pertenezca la opción definida.
		- Texto de la opción o solicitud de dato. Se trata de una palabra o texto con un máximo de 16 caracteres.
		- Código numérico del grupo de opciones del nivel superior o a volver cuando se salga del grupo de la opción.
		- Código numérico del grupo de opciones del nivel inferior o siguiente cuando opción a definir tenga un subnivel de opciones o datos a definir o configurar.
		- Valor por defecto a asignar cuando se valide la opción sin proporcionar ningún valor por teclado.
		- Action Code: Es un código que indica la acción que debe ser ordenada al dispositivo o que debe ser ejecutada por el software. La tabla inicial de Action Code es la siguiente:

			1	Activación de un dispositivo
			2	Desactivación de un dispositivo
			9	Cambia el estado de Activación/Desactivación que tenga un dispositivo


GESTION DE COMUNICACIONES
=========================

	Para la gestión de las comunicaciones se utiliza la librería VirtualWire. Esta librería proporciona, entre otras funcionalidades, la inclusión de caracteres de sincronización de comunicaciones y dígitos de control de la información enviada en cada paquete.

	La versión 0 de la aplicación RAIN_Z proporcionará comunicación exclusivamente unidireccional emisor (controlador central) a receptor (dispositivo de activación/desactivación de electroválvula). Por tanto, no existe la posibilidad de conocer si el receptor recibe los comandos de órdenes correctamente aunque se usará un protocolo de  verificación de errores de transmisión mediante checksum de la información enviada.

	Para el envío de comandos u órdenes a los dispositivos se utilizará un protocolo de comunicaciones propio RainP que determina la estructura de los paquetes de información enviada de los datos a transmitir. RainP es accesible mediante la librería 'RainPComm.h' que ofrece un interface de acceso muy simplificado para la utilización del protocolo RainP. 

	'RainP.h' se encarga de iniciar y detener los dispositivos de comunicaciones, llevar el control de bloques emitidos y recibidos, aceptar o rechazar los paquetes recibidos y comprobar la recepción correcta de la información. El usuario de la librería, por tanto, solamente debe preocuparse de pasar a la librería los comandos a enviar y preguntar si hay algún paquete recibido pendiente de atender.


PROTOCOLO DE COMUNICACIONES RainP
=================================

	El protocolo RainP define la estructura de los paquetes de datos a transmitir entre dispositivos de una misma red funcionando bajo el control de una aplicación RainZ. Cada envío de datos se realiza construyendo dos bloques de información que se enviarán independientemente pero uno detrás de otro, cuidando que el contador de bloque que se incluye en cada bloque tengan una numeración correlativa. Estos dos paquetes de información se definen como Bloque de Direcciones (AddressBlock) y Bloque de Comando (PayloadBlock) deberá constar de los siguientes datos:

	La estructura del Bloque de Direcciones es la siguiente:

	Número de paquete		Número entero largo entre 1 y 16.000.000
	Tipo de paquete			Siempre "A" (Addresses)
	Red de destino			Número entero largo entre 1 y 16.000.000
	Dispositivo de destino		Número entero entre 1 y 65332.
	Dispositivo de origen		Número entero entre 1 y 65332.

	La estructura del Bloque de Comando es la siguiente:

	Número de paquete		Número entero largo entre 1 y 16.000.000.
	Tipo de paquete			Siempre "P" (Payload)
	Comando de ejecución		Número entero entre 1 y 65332, según la tabla de comandos de la aplicación RainZ.

	Dentro de cada paquete cada dato irá separado del siguiente por un caracter '#'. Además, cada paquete deberá comenzar y finalizar con el mismo caracter '#'.


MEDIO DE COMUNICACION
=====================

	Para la comunicación entre el controlador central y el dispositivo de control de la electroválvula se realiza mediante un emisor de RF a 434 Mhz que se instala junto al controlador central y un receptor de la misma frecuencia que se instala junto al sistema de control de la electroválvula.

	La gestión de las comunicaciones se realiza a través de la librería VirtualWire y usando el protocolo propio RainP, creado específicamente para la aplicación Rain_Z.

	La primera versión de comunicaciones para el control de la electroválvula es unidireccional emisor-receptor, sin existir bloques de respuesta desde el dispisitivo de control de la electroválvula confirmando la correcta recepción de órdenes o informando de errores en las comunicaciones para solicitar nuevos reintentos. Dichas propiedades quedan para su implementación en futuras versiones del sistema.


EMISOR RF
=========

	Las primeras pruebas se han realizado con un emisor basado en el integrado BX R433A de Seeed. Los pines que ofrece este circuito para su conexionado son los siguientes:

	VCC	Tensión de alimentación. Debe estar comprendida entre 3v. y 12v.
	GND	Masa.
	DATA	Entrada de datos a transmitir.
	ANT	Conexión de antena si se desea usar.

	La hoja de caracterśiticas del fabricante indica un alcance de 40 metros con obstáculos y 100 metros sin obstáculos. Las pruebas realizadas hasta ahora han permitido comunicaciones hasta 10 metros con obstáculos.


RECEPTOR RF
===========

	Se ha usado el compañero que viene en el kit del emisor indicado anteriormente. Los pines de conexión, puesto que no vienen rotulados en la plaquita, se han numerado del 1 al 4 mirándolos de izquierda a derecha por la cara de componentes y con los pines hacia abajo y son los siguientes:

	1	VCC	Tensión de alimentación 5v. (+)
	2 y 3	DATA	Datos recibidos.
	4	GND	Masa.

	Adicionalmente, en otro lugar de la placa y alejado de los pines, existe un orificio en la placa para soldar la conexión de una antena receptora. Dicho orificio está indicado como ANT.

		ANT	Antena.


SOFTWARE PARA DISPOSITIVOS DE TIPO SOLENOIDE (solo recepción)
=============================================================

	El software a desarrollar en esta versión es el que deben implementar los dispositivos que controlan los solenoides de una electroválvula. Solamente se desarrollará un sistema que reciba los paquetes de información, los filtre para rechazar los que no vayan dirigidos al dispositivo y ejecute el comando recibido. No se reenvían paquetes de notificación de recepción ni solicitudes de reenvío o notificaciones de estado, siendo la comunicación en un único sentido, emisor a receptor.

	Los pasos que realiza el software son los siguientes:

	1. Esperar la llegada de un paquete.
	2. Chequeo de formato e integridad del paquete. Si es un Bloque de Direcciones continúa en el punto 3, de otro modo vuelve a punto 1.
	3. Chequeo de dirección de destino.
	4. Espera de recepción del siguiente paquete de datos.
	5. Chequeo de número de paquete. Si es un Boque de Comando y es el número de paquete consecutivo al recibido anteriormente sigue en aso 6, de otro modo vuelve a punto 1.
	6. Extracción de comando a ejecutar.
	7. Ejecución de comando.

